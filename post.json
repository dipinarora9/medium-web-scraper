{
    "id": "158925112bf9",
    "title": "Implement Dark Mode in Flutter using Provider",
    "created_at": 1626154184530,
    "description": "",
    "medium_url": "https://medium.flutterdevs.com/implement-dark-mode-in-flutter-using-provider-158925112bf9",
    "paragraphs": [
        "<img src='https://miro.medium.com/1*FjA8yndkPV5g2cLOirVH8A.gif'>",
        "<h3>Implement Dark Mode in Flutter using Provider</h3>",
        "<p>Hi everyone, In this article, we will be learning how to implement the dark theme in our app using the provider package</p>",
        "<p>As we all now Dark theme is trending and most of the popular app has the feature to turn into the dark mode.</p>",
        "<h4>There are two ways to turn on the dark mode in any app:</h4>",
        "<p>1: Adding a custom option to change to the dark mode (Eg: Twitter, Medium app)</p>",
        "<img src='https://miro.medium.com/1*vo9joW9i9S8odYXnEdNoQw.png'>",
        "<p>2: Depends on the Phone system setting (Eg: Instagram)</p>",
        "<img src='https://miro.medium.com/1*0jdZScdKdELNRuaS4_uzAA.gif'>",
        "<p>We already have both the options in flutter.</p>",
        "<p>If you check the MaterialApp widget you will see</p>",
        "<img src='https://miro.medium.com/0*NRYoyuxdwUFO-ukf'>",
        "<p>We have the theme and darkTheme parameter in MaterialApp widget we can provide the dark ThemeData in darkTheme and light ThemeData in theme if we want our app to change the theme according to the system preferences.</p>",
        "<p>And if we have a custom button or something to change the dark theme then we just have to put some condition to change it.</p>",
        "<p>Let's implement the dark mode to an app</p>",
        "<h3>Implementation</h3>",
        "<h4>Step 1: Add the dependencies</h4>",
        "<p>Add dependencies to pubspec.yaml file.</p>",
        "<pre>dependencies:\n  flutter:\n    sdk: flutter\n  shared_preferences: \"<newest version>\"\n  provider: \"<newest version>\"</pre>",
        "<p>we are using the SharedPreferences to set the value in the memory so even if we close the app and reopens it, our data won't lose.\nProvider is used to manage the state when the dark theme is implemented on the app.</p>",
        "<h4>Step 2: Create a class for SharedPreferences</h4>",
        "<p>We are creating a separate class for the SharedPreferences so the code won't mess up.</p>",
        "<iframe src='https://miro.medium.com/ad2e5a18dd0c8226e8625ba9c5a8f414'></iframe>",
        "<p>We have created a class DarkThemePreference where we are storing the bool value in for the dark theme, we have two methods for saving and retrieving the bool value.</p>",
        "<h4>Step 3: Create a model class for provider</h4>",
        "<iframe src='https://miro.medium.com/7cef0032385bc2165f99aa811a6add5e'></iframe>",
        "<p>We are accessing the preference value through the provider so whenever there is any change the notifyListeners() UI will be updated if we have attached the provider to the screen.</p>",
        "<h4>Step 4: Add custom theme data for dark mode</h4>",
        "<p>if you see we have to provide the ThemeData , so I have created a method for dark and light mode.</p>",
        "<iframe src='https://miro.medium.com/0d388fba1f85cf53a2418b7ed1cca72e'></iframe>",
        "<h4>Step 5: Add the provider to Material app</h4>",
        "<pre>void main() {\n  runApp(MyApp());\n}</pre>",
        "<p>when we run our app the first widget will be MyApp which will have MaterialApp .</p>",
        "<pre>class MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: SplashScreen(),\n      routes: <String, WidgetBuilder>{\n        AGENDA: (BuildContext context) => AgendaScreen(),\n      },\n    );\n  }\n}</pre>",
        "<p>Now in the initState of our MyApp we will check for the value that is stored in the SharedPreferences through the Provider.</p>",
        "<pre>DarkThemeProvider themeChangeProvider = new DarkThemeProvider();\n\n@override\nvoid initState() {\n  super.initState();\n  getCurrentAppTheme();\n}\n\nvoid getCurrentAppTheme() async {\n  themeChangeProvider.darkTheme =\n      await themeChangeProvider.darkThemePreference.getTheme();\n}</pre>",
        "<p>If you see the getCurrentAppTheme method, I am fetching the value from the preferences and set the value in the provider.</p>",
        "<p>Now we will add notifier to the material app which is ChangeNotifierProvider and set a provider model to it, if any change happens in the provider it will notify its descendants.</p>",
        "<iframe src='https://miro.medium.com/d15e285d1dc8d44d79457e14192751c6'></iframe>",
        "<p>To listen to the changes in the UI we can use Consumer will listen to the changes and update the MaterialApp .</p>",
        "<p>We can also use this instead of Consumer<T> .</p>",
        "<pre>var darkThemeProvider = Provider.of<DarkThemeProvider>(context)</pre>",
        "<h4>Final Step: Turn on the dark theme</h4>",
        "<p>For example, we have a CheckBox through which we are setting the theme.</p>",
        "<pre>@override\nWidget build(BuildContext context) {\n  final themeChange = Provider.of<DarkThemeProvider>(context);</pre>",
        "<pre>...</pre>",
        "<pre>Checkbox(\n  value: themeChange.darkTheme, </pre>",
        "<pre>  onChanged: (bool value) {</pre>",
        "<pre>  themeChange.darkTheme = value;</pre>",
        "<pre>})</pre>",
        "<p>When the value is \u201ctrue\u201d the provider will set the theme to dark and turn into a light mode when the value is true.</p>",
        "<p>and Kaboom \ud83d\udca5</p>",
        "<p>We have successfully learned how to add a dark theme to your app.</p>",
        "<p>We also have created a Devfest app for Google Developers Group New Delhi in which we had implemented a dark mode with some animation.</p>",
        "<img src='https://miro.medium.com/1*q34h0kO6pOevqROJ08tpVg.gif'>",
        "<p>Check out the whole code here</p>",
        "<mixtape_embed>flutter-devs/Flutter-Devfest\nA new Flutter application. This project is a starting point for a Flutter application. A few resources to get you\u2026github.com</mixtape_embed>",
        "<p>Thanks for reading this article \u2764</p>",
        "<p>If I got something wrong \ud83d\ude48, Let me know in the comments. I would love to improve.</p>",
        "<p>Clap \ud83d\udc4f If this article helps you.</p>",
        "<p>Connect with me on Linkedin and Github</p>"
    ],
    "creator": {
        "profile_url": "https://medium.com/@ashishrawat2911",
        "name": "Ashish Rawat",
        "image_url": "https://miro.medium.com/1*YHz8cLaNTLmo-nssl6SyPA.png",
        "bio": "Android and Flutter Developer"
    },
    "tags": [
        "android",
        "ios",
        "flutter",
        "dark-mode"
    ],
    "claps_count": 1399,
    "responses_count": 7
}